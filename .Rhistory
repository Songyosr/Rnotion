"date": {}
},
"Store availability": {
"type": "multi_select",
"multi_select": {
"options": [
{
"name": "Duc Loi Market",
"color": "blue"
},
{
"name": "Rainbow Grocery",
"color": "gray"
},
{
"name": "Nijiya Market",
"color": "purple"
},
{
"name": "Gus\'\'\'s Community Market",
"color": "yellow"
}
]
}
},
"+1": {
"people": {}
},
"Photo": {
"files": {}
}
}
}'
jsonlite::fromJSON(j, simplifyVector = F) |>
str()
j <- '{
"parent": {
"type": "page_id",
"page_id": "98ad959b-2b6a-4774-80ee-00246fb0ea9b"
},
"title": [
{
"type": "text",
"text": {
"content": "Grocery List",
"link": null
}
}
],
"properties": {
"Name": {
"title": {}
},
"Description": {
"rich_text": {}
},
"In stock": {
"checkbox": {}
},
"Food group": {
"select": {
"options": [
{
"name": "🥦Vegetable",
"color": "green"
},
{
"name": "🍎Fruit",
"color": "red"
},
{
"name": "💪Protein",
"color": "yellow"
}
]
}
},
"Price": {
"number": {
"format": "dollar"
}
},
"Last ordered": {
"date": {}
},
"Store availability": {
"type": "multi_select",
"multi_select": {
"options": [
{
"name": "Duc Loi Market",
"color": "blue"
},
{
"name": "Rainbow Grocery",
"color": "gray"
},
{
"name": "Nijiya Market",
"color": "purple"
},
{
"name": "Gus\'s Community Market",
"color": "yellow"
}
]
}
},
"+1": {
"people": {}
},
"Photo": {
"files": {}
}
}
}'
jsonlite::fromJSON(j, simplifyVector = F) |>
str()
emojifont::fontawesome("<U+0001F966>")
emojifont::emoji("<U+0001F966>")
emojifont::load.fontawesome()
?emojifont::emoji()
utf8::as_utf8("<U+0001F966>")
utf8::as_utf8()
utf8::utf8_print(<U+0001F966>)
utf8::utf8_print("<U+0001F966>)"
utf8::utf8_print("<U+0001F966>")
utf8::utf8_print("\U+0001F966")
jsonlite::fromJSON(j, simplifyVector = F,  encoding = "UTF-8") |>
str()
utf8::utf8_print("\U0001F966")
utf8::utf8_print("\U0001Ff966")
utf8::utf8_print("\U0001f609")
utf8::utf8_print(k = "\U0001f609")
?gtsummary::tbl_survfit()
load_all()
get_notion_token()
set_notion_token("secret_4bXWomWbuL7h2ahGLqlIq34OmLv37m05PJk1ptvOO1r")
k <- jsonlite::fromJSON(j, simplifyVector = F,  encoding = "UTF-8")# |>
j <- '{
"parent": {
"type": "page_id",
"page_id": "98ad959b-2b6a-4774-80ee-00246fb0ea9b"
},
"title": [
{
"type": "text",
"text": {
"content": "Grocery List",
"link": null
}
}
],
"properties": {
"Name": {
"title": {}
},
"Description": {
"rich_text": {}
},
"In stock": {
"checkbox": {}
},
"Food group": {
"select": {
"options": [
{
"name": "🥦Vegetable",
"color": "green"
},
{
"name": "🍎Fruit",
"color": "red"
},
{
"name": "💪Protein",
"color": "yellow"
}
]
}
},
"Price": {
"number": {
"format": "dollar"
}
},
"Last ordered": {
"date": {}
},
"Store availability": {
"type": "multi_select",
"multi_select": {
"options": [
{
"name": "Duc Loi Market",
"color": "blue"
},
{
"name": "Rainbow Grocery",
"color": "gray"
},
{
"name": "Nijiya Market",
"color": "purple"
},
{
"name": "Gus\'s Community Market",
"color": "yellow"
}
]
}
},
"+1": {
"people": {}
},
"Photo": {
"files": {}
}
}
}'
k <- jsonlite::fromJSON(j, simplifyVector = F,  encoding = "UTF-8")# |>
format(k)
format(k) |> class()
format(k) |> str()
str(k)
load_all
load_all()
set_notion_token()
use_package_doc("vctrs")
usethis::use_package_doc("vctrs")
load_all()
load_all()
document()
use_package("methods")
load_all()
load_all()
set_notion_token("secret_4bXWomWbuL7h2ahGLqlIq34OmLv37m05PJk1ptvOO1r")
get_notion_token()
load_all()
c("a","b") %<-% c(1,2)
use_package("zeallot")
load_all()
%<-%
?%<-%
load_all()
%<-%
?%<-%
c("a","b") %<-% c(1,2)
use_package_doc("zeallot")
load_all()
?%<-%
c("a","b") %<-% c(1,2)
c(a,b) %<-% c(1,2)
?vec_recycle_common
vec_recycle_common("A", 1:3,"1")
styler:::style_active_file()
load_all()
new_notion_sort()
notion_sort()
notion_sort("A","B","C")
a <- notion_sort(1,2,3)
a <- new_notion_sort(1,2,3)
a <- new_notion_sort("a","b","c")
a
field(a)
fields(a)
a <- new_notion_sort("a","b","c")
field(a,"property")
field(a,"property")
a <- new_notion_sort(letters,Letters,"1")
a <- new_notion_sort(letters,LETTERS,"1")
a <- notion_sort(letters,LETTERS,"1")
field(a,"property")
vec_data(a)
notion_sort("1","A")
notion_sort(1,"A")
abbreviate
abbreviate("notion_sort")
emojifont::emoji("up")
emojifont::emoji("^")
emojifont::emoji("point")
emojifont::emoji("increaSE")
emojifont::emoji("up")
crayon::bold("Hekll")
print(emojifont::emoji("up"))
crayon::bold("Hekll") |> print()
crayon::bold("Hekll") |> cat()
ifelse(1:10 > 5, "A","b")
abbreviate("create")
abbreviate("created_time")
abbreviate("last_edited_time")
abbreviate("last edited time")
load_all()
abbreviate("ascending")
abbreviate("desccending")
abbreviate("descending")
a <- notion_sort(letters,"ascending","1")
a <- sort_notion(letters,"ascending","1")
load_all()
a <- notion_sort(letters,"ascending","1")
a <- sort_notion(letters,"ascending","1")
a
load_all()
a
a <- sort_notion(letters,"ascending","1")
a
a <- sort_notion(letters,"ascending","1")
field(a,"property")
#field(a,"property")
vec_data(a)
format.notion_sort(a)
str(a)
rlang::last_error()
class(a)
str(A)
str(a)
str(vec_data(a))
format(a)
rlang::last_trace()
format.vctrs_rcrd
vctrs::format.vctrs_rcrd
document()
load_all()
a
load_all
load_all()
class(a)
load_all()
class(a)
a <- sort_notion(letters,"ascending","1")
class(a)
a <- sort_notion(letters,"ascending","1")
a
rlang::last_error()
sloop::s3_dispatch(a)
sloop::s3_dispatch(print(a))
library(sloop)
install.packages("sloop")
sloop::s3_dispatch(print(a))
print(a)
sloop::s3_dispatch(print(a))
sloop::s3_dispatch(str(a))
?sloop::s3_dispatch
?sloop::s3_dispatch(format(a))
sloop::s3_dispatch(format(a))
format(a)
rlang::last_error()
format.vctrs_rcrd(a)
vctrs:::format.vctrs_rcrd(a)
rlang::last_error()
rlang::last_trace()
?vctrs_rcrd
?new_rcrd
install.packages("vctrs")
install.packages("vctrs")
load_all()
load_all
devtools::load_all()
sort_notion()
sort_notion() |> print()
sort_notion("A","A","C") |> print()
loaded_packages()
load_all()
a <- sort_notion(letters,"ascending","1")
load_all()
a <- sort_notion(letters,"ascending","1")
a
a
devtools::document()
load_all()
a
load_all()
a
load_all()
#field(a,"property")
vec_data(a)
#field(a,"property")
class(a)
#field(a,"property")
sloop::s3_dispatch(class(a))
sloop::s3_dispatch(str(a))
sloop::s3_dispatch(print(a))
sloop::s3_dispatch(format(a))
format(a)
format.notion_sort(a)
format.notion_sort()
rm(a)
load_all()
load_all()
load_all()
load_all()
vec_c(rational(1, 2), 1L, NA)
x <- rational(1, 1:10)
x
sloop::s3_dispatch(print(x))
sloop::s3_dispatch(print(x))
print(x)
rlang::last_error()
vctrs:::print.vctrs_vctr(x)
vctrs:::print.vctrs_vctr()
?vctrs:::print.vctrs_vctr()
load_all()
format.vctrs_rational(x)
x
sloop::s3_class(print(x))
sloop::s3_class(x)
sloop::s3_dispatch(x)
sloop::s3_dispatch(print(x))
sloop::s3_dispatch(format(x))
format.vctrs_rational(x)
format.vctrs_rcrd(x)
vctrsLLformat.vctrs_rcrd(x)
vctrs::format.vctrs_rcrd(x)
vctrs:::format.vctrs_rcrd(x)
rlang::last_trace()
format(x)
class(x)
class(x) <- class(x)[c(1,3)]
class(x)
format(x)
x
print()
print(x)
sloop::s3_dispatch(print(x))
sloop::s3_dispatch(format(x))
class(x)[2] <- "vctrs_rcrd"
class(x)
sloop::s3_dispatch(format(x))
x
x
format(x)
sloop(print(x))
sloop::s3_dispatch(print(x))
sloop::s3_dispatch(str(x))
sloop::s3_dispatch(format(x))
format(x)
rlang::last_trace()
rlang::last_error()
class(x)[3] <- "vctrs_vctr"
class(x)
load_all()
class(x)
format(x)
sloop::s3_dispatch(format(x))
sloop::s3_dispatch(print(x))
new_rational <- function(n = integer(), d = integer()) {
vec_assert(n, ptype = integer())
vec_assert(d, ptype = integer())
new_rcrd(list(n = n, d = d), class = "vctrs_rational")
}
rational <- function(n = integer(), d = integer()) {
c(n, d) %<-% vec_cast_common(n, d, .to = integer())
c(n, d) %<-% vec_recycle_common(n, d)
new_rational(n, d)
}
#x <- rational(1, 1:10)
#' @export
format.vctrs_rational <- function(x, ...) {
n <- field(x, "n")
d <- field(x, "d")
out <- paste0(n, "/", d)
out[is.na(n) | is.na(d)] <- NA
out
}
vec_ptype_abbr.vctrs_rational <- function(x, ...) "rtnl"
vec_ptype_full.vctrs_rational <- function(x, ...) "rational"
vec_ptype2.vctrs_rational.vctrs_rational <- function(x, y, ...) new_rational()
vec_ptype2.vctrs_rational.integer <- function(x, y, ...) new_rational()
vec_ptype2.integer.vctrs_rational <- function(x, y, ...) new_rational()
vec_cast.vctrs_rational.vctrs_rational <- function(x, to, ...) x
vec_cast.double.vctrs_rational <- function(x, to, ...) field(x, "n") / field(x, "d")
vec_cast.vctrs_rational.integer <- function(x, to, ...) rational(x, 1)
#vec_c(rational(1, 2), 1L, NA)
#> <rational[3]>
#> [1] 1/2  1/1  <NA>
#x
#> <rational[10]>
#>  [1] 1/1  1/2  1/3  1/4  1/5  1/6  1/7  1/8  1/9  1/10
a <- sort_notion(letters,"ascending","1")
a#field(a,"property")
sloop::s3_dispatch(format(a))
sloop::s3_dispatch(print(a))
sloop::s3_dispatch(str(a))
format(a)
rlang::last_error()
rlang::last_trace()
load_all()
x <- rational(1, 1:10)
x
rlang::last_error()
use_package("vctrs", type = "Dependence")
use_package("vctrs", type = "Depends")
load_all()
x <- rational(1, 1:10)
x
rlang::last_error()
rlang::last_trace()
a
rlang::last_error()
rlang::last_trace()
load_all()
x
rlang::last_error()
rlang::last_trace()
load_all()
sloop::s3_methods_class("vctrs_rcrd")
sloop::s3_methods_class("notion_sort")
sloop::s3_methods_class("vctrs_rational")
sloop::s3_methods_generaic("format")
sloop::s3_methods_generaics("format")
sloop::s3_methods_generic("format")
sloop::s3_methods_generic("format") |> dplyr::filter(class == "notion_sort")
