str(kk$results, max.level = 3)
kk <- content(test, "text") |> fromJSON(simplifyVector = FALSE) #|> select(results)
str(kk$results, max.level = 3)
str(kk$results, max.level = 4)
as_tibble(kk$results) |> View()
kk$results
str(kk$results, max.level = 3)
View(kk)
test <- query_db(db2)
kk <- content(test, "text") |> fromJSON(simplifyVector = FALSE) #|> select(results)
str(kk$results, max.level = 3)
as_tibble(kk$results) |> View()
View(kk)
kk
as_tibble(kk)
as_tibble(kk$results)
as_tibble(kk$results[[1]])
as_tibble(kk$results[[1:9]])
as_tibble(kk$results[[2]])
as_tibble(kk$results[[2]])
kk$results[[3]]
kk$results[[1:3]]
kk$results[[c(1:3)]]
kk$results[1:3]
kk$results[1:9] |> as_tibble()
kk$results[1:9] |> as_tibble(.name_repair = TRUE)
(
j <- get_db_list() |> content()
k <- tibble(data = j$results)
j <- get_db_list() |> content()
#http_type(get_db_list())
str(j, max.level = 3)
k <- tibble(data = j$results)
k %>%
hoist(data,
"object","id",
name = list("title",1,"plain_text"),
structure = list("properties"),
.simplify = TRUE) %>%
unnest_longer(structure)
j <- get_db_list(db2) |> content(as = "text") |> fromJSON()
j
#http_type(get_db_list())
str(j, max.level = 3)
k <- tibble(data = j$results)
k
k <- tibble(data = j$results)
str(k, max.level = 5)
k <- tibble(data = j$results)
k
tibble(data = j$results)
j
#http_type(get_db_list())
str(j, max.level = 3)
#http_type(get_db_list())
str(j, max.level = 4)
#http_type(get_db_list())
str(j, max.level = 4) |> View()
j |>View()
j[["properties"]][["Class"]][["select"]][["options"]]
View(j[["properties"]][["Status"]][["select"]][["options"]])
j[["properties"]][["Status"]][["select"]][["options"]]
j[["properties"]][["Status"]][["select"]][["options"]]
library(httr)
library(jsonlite)
library("emojifont")
library(dplyr)
library(tidyr)
NOTION_KEY = "secret_4bXWomWbuL7h2ahGLqlIq34OmLv37m05PJk1ptvOO1r"
DATABASE_ID = "eb4bf81847fc4940baf7e93e269fc8e7"
notion_header <- \(key = NOTION_KEY){
add_headers("Authorization" = paste("Bearer", key),
"Notion-Version" = "2021-05-13",
"Content-Type" = "application/json"
)
}
get_db_list <- \(db_id = NULL){
path = paste0("v1/databases/",db_id)
url <- modify_url("https://api.notion.com/",path = path)
#  print(path)
#  print(url)
GET(url, notion_header())
}
query_db <- \(db_id = NULL){
path = paste("v1/databases",db_id, "query", sep = "/")
url <- modify_url("https://api.notion.com/",path = path)
print(path)
print(url)
POST(url, notion_header())
}
db_list <- get_db_list() |> content(as = "text") |> fromJSON(simplifyDataFrame = F)
# subset ------------------------------------------------------------------
DATABASE_ID
db2 <- "fcc1990d-369e-43bd-8eb4-0f1a9cd0ef45"
test <- query_db(db2)
kk <- content(test, "text") |> fromJSON(simplifyVector = FALSE) #|> select(results)
as_tibble(kk$results) |> View()
kk$results
View(kk)
kk$results
kk$results |>
bind_rows()
kk$results |>
unnest_auto()
as_tibble(kk$results)
class(kk$results)
as_tibble(kk$results)
rlang::last_error()
?as_tibble
as_tibble(kk$results, .name_repair = "minimal")
as_tibble(list(kk$results), .name_repair = "minimal")
as_tibble(list(kk$results))
as_tibble(list(kk$results), .name_repair = "unique")
as_tibble(list(kk$results), .name_repair = "universal")
as_tibble(pages =list(kk$results), .name_repair = "universal")
as_tibble(pages = list(kk$results), .name_repair = "universal")
as_tibble(pages = list(kk$results), .name_repair = "minimal")
as_tibble(list(kk$results), .name_repair = "minimal")
as_tibble(list(k = kk$results), .name_repair = "minimal")
poli <- as_tibble(list(k = kk$results), .name_repair = "minimal")
poli |>
unnest_wider()
poli |>
unnest_wider(k)
poli |>
unnest_wider(k) %>%
hoist("properties")
poli |>
unnest_wider(k) %>%
hoist(properties, "type")
poli |>
unnest_wider(k) %>%
hoist(properties, "type")
poli |>
unnest_wider(k) %>%
hoist(properties, "Type")
poli |>
unnest_wider(k) %>%
unnest_wider(properties) #%>%
test <- poli |>
unnest_wider(k) %>%
unnest_wider(properties)
toJSON(test)
toJSON(test) |> fromJSON()
test <- poli |>
unnest_wider(k) %>%
unnest_wider(properties) |>
filter(1)
test <- poli |>
unnest_wider(k) %>%
unnest_wider(properties) |>
sample_n(1)
toJSON(test) |> fromJSON()
toJSON(test) |> fromJSON(simplifyVector = F)
toJSON(test) |> fromJSON(simplifyVector = F)  |> str()
test <- poli |>
unnest_wider(k) %>%
#unnest_wider(properties) |>
sample_n(1)
toJSON(test) |> fromJSON(simplifyVector = F)  |> str()
use_package("httr")
use_package("jsonlite")
use_package("dplyr")
use_package("tidyr")
use_package("utils")
use_package("stats")
use_package("tibbles")
use_package("tibble")
use_package("vctrs")
use_package("magrittr")
?use_package()
use_package("bibtex", type = "Suggests")
use_package("RefManageR", type = "Suggests")
use_package("latex2exp")
load_all()
load_all()
load_all()
notion_header <- \(){
key = get_notion_token()
add_headers("Authorization" = paste("Bearer", key),
"Notion-Version" = "2021-05-13",
"Content-Type" = "application/json"
)
}
load_all()
load_all()
notion_header()
set_notion_token()
load_all()
set_notion_token()
get_notion_token()
load_all()
notion_header()
styler:::style_active_file()
load_all()
notion_header()
?mean
?select
styler:::style_active_file()
load_all()
document()
?notion_header
?notion_header
load_all()
document()
?notion_header
load_all()
document()
?notion_header
?set_notion_token
get_notion_token()
?POST
load_all()
notion_search()
load_all()
notion_search()
notion_search <- function(query = NULL){
httr::POST("https://api.notion.com/v1/search",
notion_header(),
body = query)
}
load_all()
notion_search()
test <- notion_search()
content(test)
httr:content(test)
httr::content(test)
test <- notion_search() |> httr::content()
str(test, max.level = 3)
test <- notion_search("Class Notes") |> httr::content()
str(test, max.level = 3)
styler:::style_active_file()
load_all()
load_all()
test <- notion_search("Class Notes") |> httr::content()
str(test, max.level = 3)
test <- notion_search("Class Notes") |> httr::content()
httr::content(test)
str(test, max.level = 3)
notion_search("Class Notes")
q = "Classnote"
body = jsonlite::toJSON(
query = list(q),
auto_unbox = TRUE
)
jsonlite::toJSON(
query = list(q),
auto_unbox = TRUE
)
jsonlite::toJSON(
list(query = list(q)),
auto_unbox = TRUE
)
jsonlite::toJSON(
q,
auto_unbox = TRUE
)
jsonlite::toJSON(
list(query = list(q))
)
?tojson
?toJSON
jsonlite::toJSON(q)
notion_search <- function(query = NULL) {
httr::POST("https://api.notion.com/v1/search",
notion_header(),
body = jsonlite::toJSON(
list(query = list(query)),
auto_unbox = TRUE
), encode = "raw"
)
}
load_all()
test <- notion_search("Class Notes") |> httr::content()
httr::content(test)
str(test, max.level = 3)
load_all()
test <- notion_search("Class Notes") |> httr::content()
str(test, max.level = 3)
test <- notion_search("Phd Planners") |> httr::content()
str(test, max.level = 3)
notion_search("Research project")
test <- notion_search("Research project") |> httr::content()
test
test <- notion_search("Rsfvsdft") |> httr::content()
test
test <- notion_search("Cohort Study") |> httr::content()
str(test, max.level = 3)
test <- notion_search(c("Cohort Study", "Screening")) |> httr::content()
httr::content(test)
str(test, max.level = 3)
jsonlite::fromJSON("sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
})
jsonlite::fromJSON('"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}')
jsonlite::fromJSON('"sort":{"direction":"ascending","timestamp":"last_edited_time"}')
fromJSON("https://api.github.com/users/hadley/orgs")
jsonlite::fromJSON("https://api.github.com/users/hadley/orgs")
jsonlite::fromJSON('"sort":{"direction":"ascending","timestamp":"last_edited_time"}')
jsonlite::stream_in('"sort":{"direction":"ascending","timestamp":"last_edited_time"}')
?stream_in
json_test <- '{
"query":"External tasks",
"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}
}'
jsonlite::fromJSON(json_test)
jsonlite::fromJSON(json_test) |> str()
list(sort = list(direction = "asss", timestamp = "asdasdas")) |> jsonlite::toJSON()
load_all
load_all()
test <- notion_search(query = "Cohort Study") |> httr::content()
load_all()
test <- notion_search(query = "Cohort Study") |> httr::content()
test
str(test, max.level = 3)
styler:::style_active_file()
load_all()
mean(NULL)
# Assert
assertive.types::assert_is_a_string(NULL)
load_all()
load_all()
x %|null|% x+5
x %|null|% x+5
x %||% x+5
x %|null|% 1+5
x %|null|% 1+5
load_all()
x %|null|% 1+5
x %|null|% 1+5
NULL %|null|% 1+5
'%|null|%' <- function(lhs, rhs){
if(is.null(lhs)) return()
else rhs
}
load_all()
load_all()
x %|null|% 1+5
#x %|null|% 1+5
1 %|null|% 1+5
#x %|null|% 1+5
5 %|null|% 1+5
#x %|null|% 1+5
x <- NULL
x %|null|% x+5
j <- x %|null|% x+5
class(NULL)
class(j)
load_all()
x %|null|% 1+5
load_all()
x %|null|% x+5
load_all
load_all()
x %|null|% 1+5
x %|null|% 1+5
load_all()
x %|null|% 1+5
x %|null|% 1+5
x %|null|% x+5
x <- 1
x %|null|% x+5
x <- 1
x <- x %|null|% x+5
x <- NULL
x <- x %|null|% x+5
x <- NULL
load_all()
x <- x %|null|% x+5
# x <- NULL
# x <- x %|null|% x+5
class(x) <- "NULL"
x <- NULL
class(x)
str(x)
# x <- NULL
x <- x %|null|% x+5
str(x)
class(x)
class(x) <- NULL
class(x)
class(x) <- "NULL"
class(x)
as.null(NULL)
as.null()
load_all()
x <- x %|null|% x+5
x <- NULL
x %|null|% data.frame(x,x)
x %|null|% data.frame(x,x)
x <- 1
# x <- 1
x <- x %|null|% data.frame(x,x)
x <- NULL
x <- x %|null|% data.frame(x,x)
x <- x %|null|% data.frame(x,x)
load_all()
x <- NULL
x <- x %|null|% data.frame(x,x)
x <- NULL
x <- x %|null|% data.frame(x,x)
x <- 1
x <- x %|null|% data.frame(x,x)
x <- NULL
x <- x %|null|% data.frame(x,x)
assertive.types::assert_is_a_string(NULL)
assertive.types::is_a_string(NULL)
styler:::style_active_file()
load_all()
obj_sort()
##------ Wed Jul 21 14:45:39 2021 ------##
load_all()
obj_sort()
obj_sort()
load_all()
obj_sort()
obj_sort(direction = "asdas")
?match.arg
assertive.types::is_call(mean(1:5))
?vctrs::vec_compare()
load_all()
add_checkpoint(1:5)
attr(1:6, "asdas")
load)all()
load_all()
1:4 |> validate_checkpoint()
load_all()
1:4 |> validate_checkpoint()
list(a = 5 , c = 1111)
list(j)
list(letters)
?list(letters)
as.list(letters)
tibble::lst(letters)
load_all()
obj_sort(direction = NULL)
obj_sort(direction = 12)
?match.arg
match.arg("A",LETTERS)
match.arg("ZZ",LETTERS)
match.arg(NULL,LETTERS)
match.arg(NULL,LETTERS)
load_all()
obj_sort()
load_all()
obj_sort()
load_all()
obj_sort()
obj_sort() |> toJSON()
obj_sort() |> jsonlite::toJSON()
obj_sort() |> str()
list(a = NULL, b = letters)
list(NULL, b = letters)
use_package("rlist")
load_all()
obj_sort() |> str()
obj_sort()
obj_sort(direction = NULL)
obj_sort(direction = kkk)
obj_sort(direction = "ascending")
load_all()
obj_sort()
obj_sort()
obj_sort(direction = "ddd")
obj_sort(direction = "ascending")
load_all()
parse_resul(a = 415655, b = 51515, c= NULL)
parse_result(a = 415655, b = 51515, c= NULL)
parse_result(a = 415655, b = 51515, c= NULL, clean_null = FALSE)
load_all()
obj_sort()
obj_sort(direction = 1)
obj_sort(direction = "ascending")
load_all()
obj_sort(direction = "ascending")
load_all()
notion_search(filter = obj_filter(value = "database"))
notion_search(filter = obj_filter(value = "database")) |> str()
test <- notion_search(query = "Coh") |> httr::content()
str(test, max.level = 3)
load_all()
test <- notion_search(query = "Coh") |> httr::content()
str(test)
content(test)
httr::content(test)
test
str(test, max.level = 3)
notion_search(filter = obj_filter("database"))
notion_search(filter = obj_filter("database")) |> str()
notion_search(filter = obj_filter("database")) |> httr::message_for_status()
load_all()
notion_search(filter = obj_filter("database"))
notion_search(filter = obj_filter("databassssse",""))
notion_search(filter = obj_filter("database","object"))
load_all()
notion_search(filter = obj_filter("database","object"))
notion_search(filter = obj_filter("database"))
notion_search(sort = obj_sort())
load_all()
notion_search(sort = obj_sort())
load_all()
notion_search(filter = obj_filter("page"), sort = obj_sort("ascending"))
test <- notion_search(filter = obj_filter("page"), sort = obj_sort("ascending")) |> httr::content()
test <- notion_search(filter = obj_filter("database"), sort = obj_sort("ascending")) |> httr::content()
View(test)
