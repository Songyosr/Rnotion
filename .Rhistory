vec_data(j) |> purrr::transpose() |> str()
?purrr::transpose
vec_data(j) |> purrr::transpose() |> purrr::transpose() |> str()
unclass(j) |> purrr::transpose() |> purrr::transpose() |> str()
unclass(j) |> purrr::transpose()
unclass(j)
load_all()
validate_a_filter_condition(j[1])
validate_filter_condition(j[1])
validate_filter_conditions(j)
load_all()
validate_filter_conditions(j)
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "33")
j
validate_filter_conditions(j)
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contasins = "33")
validate_filter_conditions(j)
validate_filter_conditions(j) |> str()
validate_filter_conditions(j) |> vec_data()
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "33")
validate_filter_conditions(j) |> vec_data()
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "AAA33")
validate_filter_conditions(j) |> vec_data() |> str()
load_all()
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "AAA33")
validate_filter_conditions(j)
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "AAA33")
vec_data(j)
vec_data(j) |> str()
validate_filter_conditions(j, un_RNO = TRUE)
load_all()
validate_filter_conditions(j, un_RNO = TRUE)
validate_filter_conditions(j, un_RNO = TRUE)
load_all()
validate_filter_conditions(j, un_RNO = TRUE)
load_all()
validate_filter_conditions(j, un_RNO = TRUE)
load_all()
validate_filter_conditions(j, un_RNO = TRUE)
unlist(a = list( b= list(C = 5555)))
unlist(list( b= list(C = 5555)))
load_all()
validate_filter_conditions(j, un_RNO = TRUE)
validate_filter_conditions(j, un_RNO = TRUE)
validate_filter_condition(j, un_RNO = TRUE)
load_all()
validate_filter_conditions(j, un_RNO = TRUE)
list(a = 5)
list(a = 5, b = 4)
list(a = 5, b = 4) |> unlist
list(a = 5, b = 4) |> unlist()
?unlist
load_all()
j
load_all()
document()
j
format(j)
format.notion_filter(j)
load_all()
document
document()
load_all()
load_all()
j
load_all()
j
load_all()
document()
j
load_all()
j
load_all()
j
j
str(j)
load_all()
load_all()
j
str(j)
load_all()
j
load_all()
j
load_all()
j
vec_data(j)
load_all()
j
str(j)
data.frame(j)
load_all()
load_all()
j
unlist(j)
unlist(j) |> OR()
load_all()
unlist(j) |> OR()
unlist(j) |> OR(j[[1]])
unlist(j) |> OR(j[[1]])
OR(j[[1]])
OR(j[[1]], j[[2]])
cond <- list(
asdas = 4,
ergerg = "Hello"
)
cond <- list(
asdas = 4#,
#ergerg = "Hello"
)
cond
cond
eval(cond)
list(A =1, B = 2, eval(cond))
k <- list(A =1, B = 2, eval(cond))
k
k
k <- list(A =1, B = 2, unlist(cond))
k
k <- list(A =1, B = 2, cond[1])
k
k <- list(A =1, B = 2, cond[[1]])
k
k <- lst(A =1, B = 2, cond[[1]])
k
k <- tiblle::lst(A =1, B = 2, cond[[1]])
k
k <- tibble::lst(A =1, B = 2, cond[[1]])
k
k <- tibble::lst(A =1, B = 2, eval(cond[[1]]))
k
eval(cond[[1]])
mget(cond)
?mget
k <- tibble::lst(A =1, B = 2, mget(cond))
cond <- list(
asdas = 4#,
#ergerg = "Hello"
)
k <- tibble::lst(A =1, B = 2, mget(cond))
k <- tibble::lst(A =1, B = 2, get(cond))
k
mget("cond")
mget("cond")
k <- tibble::lst(A =1, B = 2, mget("cond"))
k
k <- tibble::lst(A =1, B = 2, mget("cond"))
j <- mget(cond)
j <- mget("cond")
j
k <- tibble::lst(A =1, B = 2, j)
k
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "AAA33")
hello %<-% cond
hello
k <- tibble::lst(A =1, B = 2, hello)
k
k <- tibble::lst(A =1, B = 2, hello)
k
purrr::map(cond,1)
j <- purrr::map(cond,1)
j
j <- filter_notion(LETTERS[1:3], "text", equals = 3, contains = "AAA33", is_empty = "")
validate_filter_conditions(j) |> vec_data() |> str()
j <- filter_notion(LETTERS[1:3], "text", equals = 3, contains = "AAA33", is_empty = " ")
validate_filter_conditions(j) |> vec_data() |> str()
j <- filter_notion(LETTERS[1:3], "text", equals = 3, contains = "AAA33", is_empty = TRUE)
validate_filter_conditions(j) |> vec_data() |> str()
rlang::last_error()
rlang::last_trace()
j <- filter_notion(LETTERS[1:3], "text", equals = 3, contains = "AAA33", is_empty = "TRUE")
validate_filter_conditions(j) |> vec_data() |> str()
j
j <- filter_notion(LETTERS[1:3], "text", equals = 3, contains = "AAA33", is_empty = TRUE)
validate_filter_conditions(j)
validate_filter_conditions(j) |> vec_data()
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "AAA33")
j
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "AAA33")
j
j <- filter_notion(LETTERS[1:2], "text", equals = 3, contains = "AAA33", equals = 3)
j <- filter_notion(LETTERS[1:3], "text", equals = 3, contains = "AAA33", equals = 3)
j
j <- filter_notion(LETTERS[1:4], "text", equals = 3, contains = "AAA33",
equals = 3, is_empty = "true")
j
validate_filter_conditions(j) |> vec_data() |> str()
validate_filter_conditions(j)
j |> vec_data() |> str()
validate_filter_conditions(j)
j |> vec_data()
j |> vec_data() |> as.list()
j |> vec_data() |> purrr::map(1)
?purrr::map
j |> vec_data() |> purrr::map(1) |> str()
j |> vec_data() |> purrr::map(1:3) |> str()
j |> vec_data() |> purrr::map('[[') |> str()
j |> vec_data() |> purrr::map('[[')
j |> vec_data() |> purrr::map(.f = ~if(is.list(.x)).x[[1]] )
j |> vec_data() |> purrr::map(.f = ~ if(is.list(.x)).x[[1]] else .x )
j |> vec_data() |> purrr::map(.f = ~ if(is.list(.x)).x[[]] else .x )
rlist::list.reverse(cond)
j |> vec_data() ->kkkk
kkk
j |> vec_data() ->kkkk
kkkk
rlist::list.reverse(kkkk$condition)
kkkk$condition
j |> vec_data() ->kkkk
rlist::list.ungroup(cond)
rlist::list.ungroup(cond)
k <- tibble::lst(A =1, B = 2, rlist::list.ungroup(cond))
k
k <- list(A =1, B = 2, rlist::list.ungroup(cond))
k
eval(k)
eval(k) |> class()
eval(k) |> names()
eval(cond) |> names()
k <- tibble::lst(A =1, B = 2, eval(cond))
k <- list(A =1, B = 2, eval(cond))
k <- list(A =1, B = 2, cond[[1]])
cond[1]
cond[1] |> names
cond[1] |> names()
(a = 1) |> names()
k <- list(A =1, B = 2, cond[1])
k <- list(A =1, B = 2, unlist(cond[1]))
load_all()
unpack_notion(j)
str(unpack_notion(j))
so <- sort_notion(property = "asdasda",
direction = "descending", timestamp = "last_edited_time")
str(unpack_notion(so))
str(unpack_notion(c(so,so))
str(unpack_notion(c(so,so)))
names(vec_data(c(so,so)))
names(vec_data(c(so,so))[3])
names(vec_data(c(so,so))[[3]])
names(vec_data(j)[[3]])
j <- filter_notion(LETTERS[1:4], "text", equals = 3, contains = "AAA33",
equals = 3, is_empty = "true")
unpack_j <- unpack_notion(j)
names(vec_data(j)[[3]])
names(unpack_j)
vec_data(j)
vec_data(j) |>  tibble::tibble()
vec_data(j) |>  tibble::tibble() |> tidyr::unnest()
?unlist
j
unpack_j <- unpack_notion(j)
unpack_j
unpack_j |> unlist(recursive = FALSE)
unpack_j |> unlist(recursive = FALSE)
vec_data(j) |> unlist(recursive = FALSE)
vec_data(j)$condition
vec_data(j)
vec_data(j) |> purrr::transpose()
vec_data(j) |> purrr::transpose() |> str()
vec_data(j) |> purrr::transpose()
?purrr::transpose()
vec_data(j) |> purrr::transpose(.names = "AS")
unpack_j <- unpack_notion(j)
j <- filter_notion(LETTERS[1:4], "text", equals = 3, contains = "AAA33",
equals = 3, is_empty = "true")
unpack_j <- unpack_notion(j)
unpack_j
lapply(unpack_j, names)
vapply(unpack_j, names)
sapply(unpack_j, names)
as.list(j)
as.list(vec_data(j))
as.list(vec_data(j)) |> purrr::transpose()
j
j[[1]]
so
so |> as.list()
so |> unlist()
so |> unlist(, recursive = FALSE)
so |> unlist(, recursive = FALSE) |> jsonlite::toJSON()
so |> unclass()
c(so, so) |> unclass()
c(so)
unclass(j)
unclass(j[[1]])
unpack_a_notion <- function(RNO) {
unclass(RNO) |> lapply(tidyr::unnest)
}
unpack_a_notion(j[1])
unpack_a_notion(so)
unpack_a_notion <- function(RNO) {
unclass(RNO)# |> lapply(tidyr::unnest)
}
unpack_a_notion(so)
unpack_a_notion(j)
unpack_a_notion(j[1])
'[['unpack_a_notion(j[1])
?'[['
'[['(unpack_a_notion(j[1]))
'[['(unpack_a_notion(j[1]))(1)
?'[['list(a= 1)
'[['list(a= 1)
'[[' (list(a= 1))
'[['(list(a= 1),1)
unpack_a_notion <- function(RNO) {
j <- unclass(RNO)
}
unpack_a_notion(j[1])
unpack_a_notion <- function(RNO) {
j <- unclass(RNO)
return(j)
}
unpack_a_notion(j[1])
unpack_a_notion(j[1]) |> is.list()
unpack_a_notion(j[1]) |> lapply(is.list)
unpack_a_notion(j[1]) |> lapply(\(x) {if(is.list(x)) x[[1]]})
unpack_a_notion(j[1]) |> lapply(\(x) {if(is.list(x)) x[[1]]})
unpack_a_notion(j[1]) |> lapply(\(x) {if(is.list(x)) x[[1]] else x})
unpack_a_notion <- function(RNO) {
j <- unclass(RNO)
return(j)
}
unpack_a_notion(j[1]) |> lapply(\(x) {if(is.list(x)) x[[1]] else x})
unpack_a_notion(j[1])
unpack_a_notion(j[1]) |> lapply(\(x) {if(is.list(x)) assign(names(x),x[[1]]) else x})
unpack_a_notion(j[1]) |> lapply(\(x) {
if(is.list(x)) {
assign(names(x),x[[1]])
} else x
})
unpack_a_notion(j[1]) |> lapply(\(x) {
if(is.list(x)) {
assign(names(x),x[[1]])
mget(names(x))
} else x
})
unpack_a_notion(j[1]) |> lapply(\(x) {
if(is.list(x)) {
assign(names(x),x[[1]])
str(mget(names(x)))
mget(names(x))
} else x
})
foo <- list(a = 1, b = list(c = "a", d = FALSE))
bar <- modifyList(foo, list(e = 2, b = list(d = TRUE)))
str(foo)
str(bar)
test <- list(e = 2)
foo <- list(a = 1, b = list(c = "a", d = FALSE))
bar <- modifyList(foo, list(test, b = list(d = TRUE)))
str(foo)
str(bar)
test <- quote(e = 2)
test
test <- quote(e = 2)
test
test <- parse(e = 2)
test <- deparse(e = 2)
test
test <- quo(e = 2)
?quote
test <- expression(e = 2)
eval(test)
quote(test)
deparse(a = 5)
quote(test)
quote(e = 2)
enquote(e = 2)
enquote(e = 2)
quote(e = 2)
quote(expression(e = 2))
quote(expression(e = 2)) |> eval()
tidyr::unnest(foo)
lapply(foo, tidyr::unnest)
lapply(foo, \(x) if(is.list(x) tidyr::unnest(x) else x)
lapply(foo, \(x) if(is.list(x) tidyr::unnest(x) else x))
lapply(foo, \(x)if(is.list(x)) tidyr::unnest(x) else x)
lapply(foo, \(x)if(is.list(x)) x[1] else x)
lapply(foo, \(x)if(is.list(x)) x[[1]] else x)
purr::map(foo,3)
purrr::map(foo,3)
purrr::map(foo,2)
purrr::map(foo,"2"b)
purrr::map(foo,"b")
with(foo, ls())
with(foo, b)
with(foo, b == 1)
foo <- list(a = 1, b = list(c = "a"))
with(foo, str(b))
with(foo, b))
with(foo, b)
with(foo, unlist(b))
with(foo, a)
with(foo, b)
rlist::list.unzip(foo)
rlist::list.extract(foo)
rlist::list.extract(foo, "b")
?rlist::list.extract(foo, "b")
foo$b <- rlist::list.extract(foo, "b")
foo
foo <- rlist::list.extract(foo, "b")
foo
foo <- list(a = 1, b = list(c = "a"))
rlist::list.flatten(foo)
?rlist::list.flatten(foo)
?rlist::list.flatten(foo, use.names = FALSE)
rlist::list.flatten(foo, use.names = FALSE)
foo <- list(a = 1, b = list(c = "d", g = "i"))
rlist::list.flatten(foo, use.names = FALSE)
purrr::flatten(foo)
purrr::flatten(j[[1]])
purrr::flatten(j)
purrr::flatten(j[[1]])
purrr::flatten(so)
lapply(j, purrr::flatten)
lapply(j, purrr::flatten) |> str()
purrr::flatten
j
purrr::flatten
purrr::flatten(so)
purrr::flatten(c(so,so))
load_all()
unpack_notion2(so)
load_all()
unpack_notion2(so)
unpack_notion2(c(so,so))
unpack_notion2(j)
unpack_notion2(j[1])
load_all()
load_all()
j <- filter_notion(LETTERS, "text", c( rep(list(equals = 3),24),  ss =4, jj ="Asdasd"))
so <- sort_notion(property = "asdasda",
direction = "descending", timestamp = "last_edited_time")
result <- notion_search(sort = so)
httr::status_code(result)
result <- notion_search(sort = c(so,so))
httr::status_code(result)
j <- filter_notion(LETTERS[1:4], "text", equals = 3, contains = "AAA33",
equals = 3, is_empty = "true")
j
c(A,B,C,D) %<-% j
c(A,B,C,D) %<-% purrr::flatten(j)
purrr::flatten(j)
c(A,B,C,D) %<-% unclass(j)
unclass(j)
c(A,B,C) %<-% unclass(j)
A
B
C
field
styler:::style_active_file()
styler:::style_active_file()
load_all()
styler:::style_active_file()
library(data.table)
fdt <- fread("test_site/filter_table.csv")
fdt
names(fdt) <- c("Property", "Type", "Description", "Example")
# Belong to
fdt[, group := as.character(NA)]
header <- fdt[,.I[Property == "Property"] - 3]
fdt[header, group := gsub(" filter condition","", Property) |>
tolower() |> (\(x)gsub("-","_",x))()]
# Extract
fdt <- fdt |>
tidyr::fill(group) |>
dplyr::filter(!is.na(Type) & Type != "" &  Type != "Type") |>
dplyr::select(group, Property) |>
dplyr::mutate()
fdt
# Extract
fdt <- fdt |>
tidyr::fill(group) |>
dplyr::filter(!is.na(Type) & Type != "" &  Type != "Type") |>
dplyr::select(group, Property) |>
dplyr::mutate()|>
dplyr::add_row(group = "object", Property = "value")
library(data.table)
fdt <- fread("test_site/filter_table.csv")
fdt
names(fdt) <- c("Property", "Type", "Description", "Example")
# Belong to
fdt[, group := as.character(NA)]
header <- fdt[,.I[Property == "Property"] - 3]
fdt[header, group := gsub(" filter condition","", Property) |>
tolower() |> (\(x)gsub("-","_",x))()]
# Extract
fdt <- fdt |>
tidyr::fill(group) |>
dplyr::filter(!is.na(Type) & Type != "" &  Type != "Type") |>
dplyr::select(group, Property) |>
dplyr::mutate()|>
dplyr::add_row(group = "object", Property = "value")
fdt
write.csv(fdt,"data/property_filter_reference.csv")
load_all()
filter_notion("object", value = "333")
filter_notion("object", NA, value = "database")
filter_notion("object", NA, value = "database") |> Rnotion::destructure()
filter_notion("object", NA, value = "database") |> unpack_notion()
filter_notion("object", NA, value = "database") |> unpack_notion() |> rlist::list.clean()
filter_notion("object", NA, value = "database") |> unpack_notion() |> na.omit()
filter_notion("object", NA, value = "database") |> validate_filter_conditions()
load_all()
load_all()
filter_notion("object", NA, value = "database")
filter_notion("object", value = "database")
load_all()
filter_notion("object", value = "database")
load_all()
filter_notion("object", NA, value = "database")
filter_notion("object", value = "database")
