# Extract
fdt <- fdt |>
tidyr::fill(group) |>
dplyr::filter(!is.na(Type) & Type != "" &  Type != "Type") |>
dplyr::select(group, Property) |>
dplyr::mutate()|>
dplyr::add_row(group = "object", Property = "value")
fdt
write.csv(fdt,"data/property_filter_reference.csv")
load_all()
filter_notion("object", value = "333")
filter_notion("object", NA, value = "database")
filter_notion("object", NA, value = "database") |> Rnotion::destructure()
filter_notion("object", NA, value = "database") |> unpack_notion()
filter_notion("object", NA, value = "database") |> unpack_notion() |> rlist::list.clean()
filter_notion("object", NA, value = "database") |> unpack_notion() |> na.omit()
filter_notion("object", NA, value = "database") |> validate_filter_conditions()
load_all()
load_all()
filter_notion("object", NA, value = "database")
filter_notion("object", value = "database")
load_all()
filter_notion("object", value = "database")
load_all()
filter_notion("object", NA, value = "database")
filter_notion("object", value = "database")
load_all()
obj_filter("database")
obj_filter("database") |> unpack_notion()
obj_filter("database") |> unpack_notion()
obj_filter("database") |> jsonlite::toJSON()
obj_filter("database") |> jsonlite::toJSON(pretty = T)
obj_filter("database") |> unlist() |> jsonlite::toJSON(pretty = T)
obj_filter("database")[[1]]
obj_filter("database")
so <- sort_notion(#property = "asdasda",
direction = "descending", timestamp = "last_edited_time")
so
result <- notion_search(sort = so)
set_notion_token("secret_4bXWomWbuL7h2ahGLqlIq34OmLv37m05PJk1ptvOO1r
")
result <- notion_search(sort = so)
?notion_search
so |> unpack_notion()
so |> unpack_notion()
result <- notion_search(sort = so)
so <- sort_notion(property = "asdasda",
direction = "descending", timestamp = "last_edited_time")
result <- notion_search(sort = so)
so |> unpack_notion() |> toJSON()
so |> unpack_notion() |> jsonlite::toJSON()
so |> unpack_notion()
j <- '{
"query":"Class Notes",
"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}
}'
j |> jsonlite::fromJSON()
load_all()
j |> jsonlite::fromJSON()
result <- notion_search(sort = so)
load_all()
result <- notion_search(sort = so)
usethis::use_testthat()
use_test()
use_test()
use_package("testthat", type = "Suggests")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
install.packages("testthat")
install.packages("testthat")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
library(testthat)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
?test_that
usethis::use_test()
j <- '"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}'
j |> jsonlite::fromJSON()
j <- '{
"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}
}'
j |> jsonlite::fromJSON()
j |> jsonlite::fromJSON()
j <- '{
"query: asdasd",
"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}
}'
j |> jsonlite::fromJSON()
j <- '{
"query": "asdasd",
"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}
}'
j |> jsonlite::fromJSON()
sort_notion(direction = "ascending", timestamp = "last_edited_time")
load_all()
load_all()
load_all()
sort_notion(direction = "ascending", timestamp = "last_edited_time")
sort_notion(direction = "ascending", timestamp = "last_edited_time") |> unpack_notion()
sort_notion(direction = "ascending", timestamp = "last_edited_time") |> unpack_notion() |> list()
sorti <-  sort_notion(direction = "ascending", timestamp = "last_edited_time")
sorti|> jsonlite::fromJSON()
sorti|> jsonlite::fromJSON()
sorti |> jsonlite::toJSON(pretty = T)
sorti |> jsonlite::toJSON(pretty = T)
unpack_notion(sorti) |> jsonlite::toJSON(pretty = T)
sorti <-  sort_notion(property = NULL, direction = "ascending", timestamp = "last_edited_time")
unpack_notion(sorti) |> jsonlite::toJSON(pretty = T)
sorti <-  sort_notion(property = NULL, direction = "ascending", timestamp = "last_edited_time")
unpack_notion(sorti) |> jsonlite::toJSON(pretty = T)
sorti <-  sort_notion(property = NA, direction = "ascending", timestamp = "last_edited_time")
unpack_notion(sorti) |> jsonlite::toJSON(pretty = T)
unpack_notion(sorti)
j |> jsonlite::fromJSON()
j |> jsonlite::fromJSON()
j <- '{
"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}
}'
j |> jsonlite::fromJSON()
j |> jsonlite::fromJSON() -> k
str(k)
str(unpack_notion(sorti))
sorti <-  sort_notion(property = NA, direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
str(sorti)
sorti |> jsonlite::toJSON(pretty = T)
args <- tibble::lst(sorti)
args
args|> jsonlite::toJSON(pretty = T)
args|> jsonlite::toJSON(pretty = T)
args|> jsonlite::toJSON(pretty = T, auto_unbox = T)
sorti <-  sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
args|> jsonlite::toJSON(pretty = T, auto_unbox = T)
sorti <-  sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
args|> jsonlite::toJSON(pretty = T, auto_unbox = T)
httr::POST("https://api.notion.com/v1/search",
notion_header(),
body = tibble::lst(sorti),
encode = "raw") |> httr::content()
set_notion_token("secret_4bXWomWbuL7h2ahGLqlIq34OmLv37m05PJk1ptvOO1r")
httr::POST("https://api.notion.com/v1/search",
notion_header(),
body = jsonlite::toJSON(tibble::lst(sorti), auto_unbox = TRUE) ,
encode = "raw") |> httr::content()
jsonlite::toJSON(tibble::lst(sorti), auto_unbox = TRUE)
sort <- sorti
httr::POST("https://api.notion.com/v1/search",
notion_header(),
body = jsonlite::toJSON(tibble::lst(sort), auto_unbox = TRUE) ,
encode = "raw") |> httr::content()
sorti <-  sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
rm(sorti)
rm(sort)
sorti <-  sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
sorti
j |> jsonlite::fromJSON()
str(k[1])
str(k[[1]])
devtools::load_all(".")
wrap(sorti)
devtools::load_all(".")
sort_notion()
assertive.properties::assert_all_are_same_length(1,1,1)
assertive.properties::assert_are_same_length(1,1,1)
devtools::load_all(".")
sort_notion()
sort_notion("prop","aa")
sorti <-  sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
sorti
devtools::load_all(".")
sorti <-  sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
sorti
devtools::load_all(".")
sorti <-  sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
sorti
load_all()
sorti
sorti
sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> length()
load_all()
sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> length()
sort_notion(direction = "ascending",
timestamp = "last_edited_time") |>
unpack_notion()
sort_notion(direction = "ascending",
timestamp = "last_edited_time") |>
unpack_notion()
devtools::load_all(".")
sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> length()
sort_notion(direction = "ascending",
timestamp = "last_edited_time")
sort_notion(direction = "descending",
timestamp = "last_edited_time")
sort_notion(direction = "ascending",
timestamp = "last_edited_time") |> unpack_notion()
library(jsonlite)
# Test sort_notion() function
expect_search <- '{
#"query":"External tasks",
"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}
}'
fromJSON(expect_search)
# Test sort_notion() function
expect_search <- '{
"query":"External tasks",
"sort":{
"direction":"ascending",
"timestamp":"last_edited_time"
}
}'
fromJSON(expect_search)
fromJSON(case1, simplifyVector = F)
sort_notion(direction = "ascending",
timestamp ="last_edited_time") |>
unpack_notion() |>
wrap()
sort_notion(direction = "ascending",
timestamp ="last_edited_time") |>
unpack_notion() |>
wrap()
sort_notion(direction = "ascending",
timestamp ="last_edited_time") |>
unpack_notion()
load_all()
sort_notion(direction = "ascending",
timestamp ="last_edited_time") |>
unpack_notion()
sort_notion(direction = "ascending",
timestamp ="last_edited_time") |>
unpack_notion() |>
wrap()
load_all()
_mean <- mean
.mean <- mean
mean(1:3)
.mean(1:3)
sort_notion("asdas","asdasd")
sort_notion(property = "asdasd","asdasd")
sort_notion(direction = "ascending","asdasd")
sort_notion(direction = "ascending", timestamp = "asdasd")
sort_notion(direction = "ascending", timestamp = "asdasd") |> validate_notion_sort()
list(1213)
names(list(1213))[1]
names(list(1213))[1] <- 5
names(jj <- list(1213))[1] <-
names(jj <- list(1213))[1] <- 5
?list
# Wrapper function
.sort_notion <- \(.names = "sort",...){
list(sort_notion(...) |> unpack_notion()) |>
(\(x){names(x)[1] <- nm; return(x)})(nm = .names)
}
rm(.sort_notion())
rm(.sort_notion)
(\(x){names(x)[1] <- nm; return(x)})(x = list(5), nm = sss)
(\(x, nm){names(x)[1] <- nm; return(x)})(x = list(5), nm = sss)
(\(x, nm){names(x)[1] <- nm; return(x)})(x = list(5), nm = "sss")
sort_notion(direction = "ascending", timestamp = "asdasd") |> validate_notion_sort() |>  class()
sort_notion(direction = "ascending",
timestamp ="last_edited_time")
sort_notion(direction = "ascending",
timestamp ="last_edited_time")
sort_notion(direction = "ascending", property = "asdasd"
timestamp ="last_edited_time")
sort_notion(direction = "ascending", property = "asdasd",
timestamp ="last_edited_time")
sort_notion(direction = "descending", property = "asdasd",
timestamp ="last_edited_time")
sort_notion(direction = "descending", property = "asdasd",
timestamp ="last_edited_time") |> unpack_notion()
# Wrapper function
.wrap <- \(.names = "sort",...){
list(... |> unpack_notion()) |>
(\(x, nm){names(x)[1] <- nm; return(x)})(nm = .names)
}
.warp(hello = 5)
wrap <- \(.names = "sort",...){
list(... |> unpack_notion()) |>
(\(x, nm){names(x)[1] <- nm; return(x)})(nm = .names)
}
wrap(55555)
wrap(55555)
wrap(sort_notion(direction = "3", time = "aqw"))
wrap <- \(.names = "sort",...){
list(list(...) |> unpack_notion()) |>
(\(x, nm){names(x)[1] <- nm; return(x)})(nm = .names)
}
wrap(sort_notion(direction = "3", time = "aqw"))
wrap <- \(.names = "sort",x){
list(x |> unpack_notion()) |>
(\(x, nm){names(x)[1] <- nm; return(x)})(nm = .names)
}
wrap(sort_notion(direction = "3", time = "aqw"))
wrap <- \(.names = "sort",x){
list(x = x |> unpack_notion()) |>
(\(x, nm){names(x)[1] <- nm; return(x)})(nm = .names)
}
wrap(sort_notion(direction = "3", time = "aqw"))
wrap <- \(.names = "sort",x){
list(unpack_notion(x)) |>
(\(x, nm){names(x)[1] <- nm; return(x)})(nm = .names)
}
wrap(sort_notion(direction = "3", time = "aqw"))
wrap(x = sort_notion(direction = "3", time = "aqw"))
# Wrapper function
dwrap <- \(x, .names = "sort"){
list(unpack_notion(x)) |>
(\(x, nm){names(x)[1] <- nm; return(x)})(nm = .names)
}
dwrap(sort_notion(direction = "3", time = "aqw"))
dwrap(rep(sort_notion(direction = "3", time = "aqw"),2))
dwrap(rep(sort_notion(direction = "3", time = "aqw"),2))
dwrap()
rep(sort_notion(direction = "3", time = "aqw"),2)
rep(sort_notion(direction = "3", time = "aqw"),2) |> dwrap
rep(sort_notion(direction = "3", time = "aqw"),2) |> dwrap()
'{
"sorts": [
{
"property": "Last ordered",
"direction": "ascending",
"timestamp": "created_time"
},
{
"property": "Ingredients",
"direction": "descending",
"timestamp": "last_edited_time"
}
]
}' |> fromJSON(simplifyVector = F)
styler:::style_active_file()
load_all()
OR(asdasd = 5, asdasd = 4)
OasdR <- function(...) {
tibble::lst(or = ...)
}
OasdR(k = 5555, j = "ASDAD")
OasdR <- function(...) {
tibble::lst(or = list(...))
}
OasdR(k = 5555, j = "ASDAD")
OasdR <- function(...) {
list(or = list(...))
}
OasdR(k = 5555, j = "ASDAD")
devtools::load_all(".")
wrap(A = 5)
wrap(A = 5, j =sss)
wrap(A = 5, j ="sss")
usethis::use_test()
load_all
devtools::load_all(".")
load_all()
load_all()
sort_filter(
property = "object",
value = "database"
) |> a_wrap()
filter_notion(
property = "object",
value = "database"
) |> a_wrap()
devtools::load_all(".")
filter_notion(
property = "object",
value = "database"
) |> a_wrap()
filter_notion(
property = "object",
value = "database"
) |> a_wrap()
list(a =8) + list(c ="apple")
library(ggplot2)
gem_text()
geom_text()
str(geom_text())
filter_notion(
+       property = "object",
+       value = "database"
+     ) |> a_wrap()
filter_notion(property = "object", value = "database")
filter_notion(property = "object", type = NA ,value = "database")
filter_notion(property = "object", value = "database")
devtools::load_all(".")
filter_notion(property = "object", value = "database")
devtools::load_all(".")
filter_notion(property = "object", value = "database")
filter_notion(property = "object", value = "database") |> unpack_notion()
devtools::load_all(".")
filter_notion(property = "object", value = "database")
filter_notion(property = "object", value = "database") |> unpack_notion()
?expect_equal
file.path(normalizePath("~/")
file.path(normalizePath("~/"), ".Renviron")
readLines(file.path(normalizePath("~/"), ".Renviron"))
readLines(file.path(normalizePath("~/"), ".Renviron"))
load_all()
get_notion_token()
set_notion_token()
get_notion_token()
readLines(file.path(normalizePath("~/"), ".Renviron"))
load_all()
get_notion_token()
set_notion_token()
load_all()
readLines(file.path(normalizePath("~/"), ".Renviron"))
Sys.getenv()
Sys.getenv("notion_api_key")
load_all()
notion_get_user()
notion_get_user() -> j
devtools::load_all(".")
notion_search("case")
j <- notion_search("case")
set_notion_token()
notion_get_user()
notion_get_user() |> print()
notion_get_user() |> content()
notion_get_user() |> httr::content()
notion_get_user() |> httr::content() |> str()
usethis::use_test()
notion_get_user() |> class()
notion_get_user() |> httr::url_success()
notion_get_user() |> httr::http_condition()
notion_get_user() |> httr::http_error()
notion_get_user() |> httr::headers()
?httr::header
?httr::headers
notion_get_user("asdasdasd")
notion_get_user("asdasdasd") |> class()
try(notion_get_user("asdasdasd")) |> class()
httr::http_status()
httr::http_status("ASdasd")
httr::http_status(notion_get_user())
httr::http_status(notion_get_user()) |> str()
?httr::http_status(notion_get_user())
httr::http_status(200)
notion_get_user(api_rate_limited = 5555)
notion_get_user(api_rate_limited = 0.00001)
?httr::config()
?httr::authenticate()
?httr::has_content
?httr::has_content(notion_get_user())
httr::has_content(notion_get_user())
content(notion_get_user())
httr::content(notion_get_user())
httr::content(notion_get_user())|> str()
notion_get_database()
notion_get_database() |> httr::http_status()
use_test()
notion_get_database() |> content()
notion_get_database() |> httr::content()
notion_get_database() |> httr::content() |> str()
notion_get_database() |> httr::content() |> str(max.levels = 3)
notion_get_database() |> httr::content() |> str(max.levels = 2)
?str()
notion_get_database() |> httr::content() |> str(max.level = 2)
notion_get_database() |> httr::content() |> str(max.level = 2)
notion_get_database() |> httr::content() |> str(max.level = 3)
notion_get_database("efb8ec2e05b5413e82ecebc902832d41")
notion_get_database("efb8ec2e05b5413e82ecebc902832d41") |> httr::content_str()
notion_get_database("efb8ec2e05b5413e82ecebc902832d41") |> httr::content |> str()
notion_get_database("efb8ec2e05b5413e82ecebc902832d41") |> httr::content() |> str()
notion_get_database("efb8ec2e05b5413e82ecebc902832d41") |> httr::content() |> str(max.level = 1)
notion_get_database("efb8ec2e05b5413e82ecebc902832d41") |> httr::content() |> str(max.level = 2)
notion_get_database("efb8ec2e05b5413e82ecebc902832d41") |> httr::content() |> str(max.level = 2)
notion_get_database("efb8ec2e05b5413e82ecebc902832d41") |> httr::content() |> str(max.level = 3)
notion_get_database() |> httr::content() |> str(max.level = 3)
?filter_notion()
notion_search(filter = filter_notion("object", value = "database")) |> httr::content() |> str(max.level = 3)
notion_search(filter = filter_notion(property = "object", value = "database")) |> httr::content() |> str(max.level = 3)
notion_search(filter = filter_notion(property = "object", type = NULL, value = "database")) |> httr::content() |> str(max.level = 3)
notion_get_database() |> httr::content() |> str(max.level = 3)
use_readme_rmd()
?use_readme_md()
